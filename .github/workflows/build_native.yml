name: Build Windows x86_64 Native MinGW
on:
  workflow_dispatch:
    inputs:
      MINGW_W64_BRANCH:
        description: 'MinGW-w64 branch'
        type: string
        required: true
        default: 'master'
      BINUTILS_BRANCH:
        description: 'Binutils branch'
        type: string
        required: true
        default: 'binutils-2_42-branch'
      GCC_BRANCH:
        description: 'GCC branch'
        type: string
        required: true
        default: 'releases/gcc-14'
jobs:
  # build_linux:
  #   uses: ./.github/workflows/build.yml
  build_windows:
    # needs: [build_linux]
    runs-on: ubuntu-latest
    # TODO: 22.04
    steps:
    - name: Reusable strings
      id: strings
      run: |
        cat << EOF | tee -a "${GITHUB_ENV}"
        CROSS_PREFIX=x86_64-w64-mingw32
        SYSROOT=${{ github.workspace }}/${CROSS_PREFIX}
        TARGET=x86_64-w64-mingw32
        PREFIX=${{ github.workspace }}/install/mingw-w64-windows
        CACHE_PATH=${{ github.workspace }}/cache
        BUILDER_PATH=${{ github.workspace }}/compiler
        BUILDER_PREFIX=x86_64-w64-mingw32
        BUILDER_PATH_PREFIX=${{ github.workspace }}/compiler/bin/x86_64-w64-mingw32
        BUILD=x86_64-pc-linux-gnu
        EOF
    - name: Install dependencies
      run: |
        mkdir -p ${{ env.PREFIX }}
        mkdir -p ${{ env.CACHE_PATH }}
        sudo apt update && sudo apt install -y flex bison texinfo libgmp-dev libmpfr-dev libmpc-dev wine
        # build-essential
        (sudo dpkg --add-architecture i386 && sudo apt-get install wine32:i386)||echo "Failed to install wine32!"
        # wine is not necessary, only for testing
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: mingw_x86_64
        path: ${{ env.BUILDER_PATH }}
        # rm args below when using fresh builds
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: 13406824267
    - name: Set build flags
      run: |
        ls -R $BUILDER_PATH/bin
        cd ${BUILDER_PATH}
        tmp_ldflags_extra="-B `realpath libexec/gcc/x86_64-w64-mingw32/14.2.1` \
        -B `realpath lib/gcc/x86_64-w64-mingw32/14.2.1` \
        -B `realpath x86_64-w64-mingw32/bin` \
        -B `realpath x86_64-w64-mingw32/lib`"
        tmp_c_flags="-I `realpath x86_64-w64-mingw32/include`"
        tmp_cc_flags="-I `realpath x86_64-w64-mingw32/include/c++/14.2.1` \
        -I `realpath x86_64-w64-mingw32/include/c++/14.2.1/x86_64-w64-mingw32`"
        tmp_COMPILER_PATH="$(realpath bin):$(realpath libexec/gcc/x86_64-w64-mingw32/14.2.1):$(realpath x86_64-w64-mingw32/bin)"
        tmp_LIBRARY_PATH="$(realpath x86_64-w64-mingw32/lib):$(realpath lib/gcc/x86_64-w64-mingw32/14.2.1)"

        cat << EOF | tee -a "${GITHUB_ENV}"
        GCC_EXEC_PREFIX=`realpath ${BUILDER_PATH}/lib/gcc`/
        COMPILER_PATH=${tmp_COMPILER_PATH}
        LIBRARY_PATH=${tmp_LIBRARY_PATH}
        CC=${BUILDER_PATH_PREFIX}-gcc
        CXX=${BUILDER_PATH_PREFIX}-g++
        AR=${BUILDER_PATH_PREFIX}-ar
        RANLIB=${BUILDER_PATH_PREFIX}-ranlib
        STRIP=${BUILDER_PATH_PREFIX}-strip
        NM=${BUILDER_PATH_PREFIX}-nm
        AS=${BUILDER_PATH_PREFIX}-as
        LD=${BUILDER_PATH_PREFIX}-ld
        CFLAGS=${tmp_c_flags} -O2 -pipe
        CXXFLAGS=${tmp_cc_flags} ${tmp_c_flags} -O2 -pipe
        LDFLAGS=-pipe ${tmp_ldflags_extra}
        EOF
    - name: Set artifact permission
      run: |
        cd $CACHE_PATH
        sudo chmod -R a+rx $BUILDER_PATH/
        $CC -v
        $CC -print-prog-name=cc1

        $CXX -v
        $CXX -print-prog-name=cc1
        cat << EOF | tee test.c
        #include <stdio.h>
        int main(void) { printf("Hello, World!\n"); }
        EOF

        cat << EOF | tee tthread.cpp
        #include <iostream>
        #include <stddef.h>
        #include <thread>
        #include <vector>
        
        void worker(int n) {
                std::cout << "Hello, thread " << n << "!\n";
        }
        
        int main() {
                std::vector<std::thread> ts;
                for (int i = 0; i < 10; ++i)
                        ts.push_back(std::thread{worker, i});
                for (auto &&t : ts) t.join();
        }
        EOF

        find $BUILDER_PATH -name "cc1"
        $CC $LDFLAGS $CFLAGS test.c -o test
        wine ./test.exe
        $CXX $LDFLAGS $CXXFLAGS tthread.cpp -o test_cpp
        wine ./test_cpp.exe
        ls
    - name: Clone repositories
      run: |
        cd $CACHE_PATH
        git clone --progress --depth 1 -b "${{ inputs.MINGW_W64_BRANCH }}"  https://git.code.sf.net/p/mingw-w64/mingw-w64 mingw-w64
        git clone --progress --depth 1 -b "${{ inputs.BINUTILS_BRANCH }}" https://sourceware.org/git/binutils-gdb.git binutils
        git clone --progress --depth 1 -b "${{ inputs.GCC_BRANCH }}" https://gcc.gnu.org/git/gcc.git gcc
    - name: Configure and build binutils
      run: |
        cd $CACHE_PATH/binutils
        mkdir build && cd build
        ../configure --host=$CROSS_PREFIX --target=$TARGET --build=$BUILD --prefix=$PREFIX --with-sysroot=$SYSROOT \
            --disable-shared --enable-static --disable-multilib --disable-nls --enable-lto --disable-gdb
        echo "[debug] starting to build binutils"
        make V=1 -j$(nproc)
        make install
    - name: Configure and build MinGW-w64 headers
      run: |
        cd $CACHE_PATH/mingw-w64/mingw-w64-headers
        mkdir build && cd build
        ../configure --host=$CROSS_PREFIX --prefix=$PREFIX/$TARGET
        make install
    - name: Configure and build MinGW-w64 C Runtime
      run: |
        cd $CACHE_PATH/mingw-w64/mingw-w64-crt
        mkdir build && cd build
        ../configure --host=$CROSS_PREFIX --prefix=$PREFIX/$TARGET
        make -j$(nproc)
        make install
    - name: Configure and build winpthread
      run: |
        cd $CACHE_PATH/mingw-w64/mingw-w64-libraries/winpthreads
        mkdir build && cd build
        ../configure --host=$TARGET --prefix=$PREFIX/$TARGET --disable-shared --enable-static
        make -j$(nproc)
        make install
    - name: Configure and build GCC
      run: |
        cd $CACHE_PATH/gcc
        mkdir build && cd build
        ../configure --host=$CROSS_PREFIX --target=$TARGET --prefix=$PREFIX \
            --enable-languages=c,c++ --disable-multilib --disable-nls \
            --with-sysroot=$SYSROOT --enable-threads=win32 \
            --enable-shared --enable-static
        make -j$(nproc)
        make install
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: native_mingw_x86_64
        path: ${{ env.PREFIX }}


